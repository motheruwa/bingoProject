import React, { useState, useEffect, useRef } from "react";
import JsBarcode from "jsbarcode";

export default function TicketGenerator() {
  const [odds, setOdds] = useState([]);
  const [selectedOdds, setSelectedOdds] = useState([]); // array of {odd, amount}
  const [ticket, setTicket] = useState(null);
  const barcodeRef = useRef(null);

  // Generate odds with random decimals
  useEffect(() => {
    const generateOdds = () => {
      let arr = [];
      for (let i = 1; i <= 100; i++) {
        arr.push((i + Math.random()).toFixed(2));
      }
      setOdds(arr);
    };
    generateOdds();
  }, []);

  // Render barcode when ticket is created
  useEffect(() => {
    if (ticket && barcodeRef.current) {
      JsBarcode(barcodeRef.current, ticket.id, {
        format: "CODE128",
        lineColor: "#000",
        width: 2,
        height: 60,
        displayValue: true,
      });
    }
  }, [ticket]);

  const addOddToTicket = (odd) => {
    if (!selectedOdds.find((item) => item.odd === odd)) {
      setSelectedOdds([...selectedOdds, { odd, amount: "" }]);
    }
  };

  const updateAmount = (odd, value) => {
    setSelectedOdds((prev) =>
      prev.map((item) =>
        item.odd === odd ? { ...item, amount: value } : item
      )
    );
  };

  const generateTicket = () => {
    if (selectedOdds.length === 0) {
      alert("Please select at least one odd");
      return;
    }
    if (selectedOdds.some((item) => !item.amount || item.amount <= 0)) {
      alert("Please enter valid amounts for all selected odds");
      return;
    }

    const ticketId = "TKT-" + Date.now(); // Unique ID
    const totalAmount = selectedOdds.reduce(
      (sum, item) => sum + parseFloat(item.amount),
      0
    );

    setTicket({
      id: ticketId,
      bets: selectedOdds,
      total: totalAmount,
      createdAt: new Date().toLocaleString(),
    });

    setSelectedOdds([]); // reset for next ticket
  };

  const handlePrint = () => {
    window.print();
    setTicket(null); // reset after printing
  };

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white shadow-lg rounded-xl">
      <h2 className="text-xl font-bold mb-4">🎟️ Aviator Ticket Generator</h2>

      {/* Display odds as clickable buttons */}
      <div className="grid grid-cols-5 gap-2 max-h-60 overflow-y-scroll border p-3 rounded mb-4">
        {odds.map((o, idx) => (
          <button
            key={idx}
            onClick={() => addOddToTicket(o)}
            className={`px-2 py-1 rounded border ${
              selectedOdds.find((item) => item.odd === o)
                ? "bg-blue-500 text-white"
                : "bg-gray-100"
            }`}
          >
            {o}x
          </button>
        ))}
      </div>

      {/* Selected odds with amount input */}
      {selectedOdds.length > 0 && (
        <div className="mb-4">
          <h3 className="font-semibold mb-2">Selected Odds</h3>
          {selectedOdds.map((item, idx) => (
            <div
              key={idx}
              className="flex items-center gap-2 mb-2 p-2 border rounded"
            >
              <span className="w-20 font-medium">{item.odd}x</span>
              <input
                type="number"
                placeholder="Amount"
                value={item.amount}
                onChange={(e) => updateAmount(item.odd, e.target.value)}
                className="border p-1 rounded w-28"
              />
            </div>
          ))}
        </div>
      )}

      <button
        onClick={generateTicket}
        className="bg-blue-500 text-white px-4 py-2 rounded w-full"
      >
        Generate Ticket
      </button>

      {/* Ticket display */}
      {ticket && (
        <div className="mt-6 p-4 border rounded bg-gray-50">
          <h3 className="font-semibold mb-2">Ticket Details</h3>
          <p><b>ID:</b> {ticket.id}</p>
          <p><b>Date:</b> {ticket.createdAt}</p>
          <div className="mt-2">
            {ticket.bets.map((bet, idx) => (
              <p key={idx}>
                {bet.odd}x → {bet.amount}
              </p>
            ))}
          </div>
          <p className="mt-2 font-bold">Total: {ticket.total}</p>

          <svg ref={barcodeRef}></svg>

          <button
            onClick={handlePrint}
            className="mt-3 bg-green-500 text-white px-4 py-2 rounded"
          >
            Print Ticket
          </button>
        </div>
      )}
    </div>
  );
}
